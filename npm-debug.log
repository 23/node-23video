0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.20
3 info using node@v0.10.16
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Domain/PeopleGroup.Internal/Users/pdre/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package.tgz
12 verbose folder .
13 info prepublish node-23video@1.0.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Domain/PeopleGroup.Internal/Users/pdre/.npm/1f1177db-tar.lock
16 silly lockFile 42235c68-m-node-23video-1-0-0-package-tgz tar:///Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package.tgz
17 verbose lock tar:///Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package.tgz /Domain/PeopleGroup.Internal/Users/pdre/.npm/42235c68-m-node-23video-1-0-0-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 42235c68-m-node-23video-1-0-0-package-tgz tar:///Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package.tgz
21 silly lockFile 42235c68-m-node-23video-1-0-0-package-tgz tar:///Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package.tgz
22 silly lockFile 14ea5ed0-e-npm-node-23video-1-0-0-package /Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package
23 verbose lock /Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package /Domain/PeopleGroup.Internal/Users/pdre/.npm/14ea5ed0-e-npm-node-23video-1-0-0-package.lock
24 silly lockFile 14ea5ed0-e-npm-node-23video-1-0-0-package /Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package
25 silly lockFile 14ea5ed0-e-npm-node-23video-1-0-0-package /Domain/PeopleGroup.Internal/Users/pdre/.npm/node-23video/1.0.0/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'node-23video',
28 silly publish   version: '1.0.0',
28 silly publish   description: 'node-23video is a full implementation of The 23 Video API (or more correctly, The Visualplatform API) for Node.js.',
28 silly publish   main: 'visualplatform.js',
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/peterdremstrup/node-23video.git' },
28 silly publish   keywords: [ '23video', '23', 'visualplatform' ],
28 silly publish   author: { name: 'Steffen T. Christensen' },
28 silly publish   license: 'ISC',
28 silly publish   bugs: { url: 'https://github.com/peterdremstrup/node-23video/issues' },
28 silly publish   homepage: 'https://github.com/peterdremstrup/node-23video',
28 silly publish   readme: '## 23 Video API for Node.js\n\n`node-23video` is a full implementation of [The 23 Video API](http://www.23developer.com/api) (or more correctly, The Visualplatform API) for [Node.js](http://www.nodejs.org). \n\nThe library includes:\n\n* Implementations of all the methods in the API.\n* OAuth signatures through [23\'s fork of `restler`](http://github.com/23/restler).\n* Methods to handle the exchange of OAuth of credentials ([more information](http://www.23developer.com/api/oauth)).\n* A handy command-line interface to the 23 Video API.\n\nThe library and it dependencies is easily installed throuh `git`:\n\n    cd node_modules/\n    git clone https://github.com/peterdremstrup/node-23video.git\n    cd node-23video\n    git submodule init\n    git submodule update\n\nFollowing packages must be installed (either with `npm install` or manually) for this to work:\n - promise (https://github.com/ForbesLindesay/promisejs.org)\n\nNPM package might come sooner or later.\n\n## Use the 23 Video API in Node.js\n\nMaking simple request to the open API:\n\n    var visualplatform = Visualplatform(domain);\n    visualplatform.album.list({search:\'test\'})\n      .then(\n        function(data){...},\n        function(errorMessage){...}\n      );\n\nMaking OAuth signed requests to the API:\n\n    var visualplatform = Visualplatform(domain, key, secret);\n    visualplatform.album.create({title:\'New album\'}, access_token. access_token_secret)\n      .then(\n        function(data){...},\n        function(errorMessage){...}\n      );\n\nMethods can be called as:\n\n    visualplatform.photo.updateUploadToken(...)\n    visualplatform[\'photo.updateUploadToken\'](...)\n    visualplatform[\'/api/photo/update-upload-token\'](...)\n\nThe first parameter is always a JS object with the filter data described in [the API documentation](http://www.23developer.com/api/#methods).\n\nAll methods requiring authentication takes `access_token` and `access_token_secret` as their second and third parameters.\n\nThe library using [@kriszyp](https://twitter.com/kriszyp)\'s [`node-promise`](https://github.com/kriszyp/node-promise) complete implementation of JavaScript promises.\n\n\n## Exchanging tokens (or: Having user grant access to the API)\n\nThe library includes two methods wrapping the OAuth token flow, `.beginAuthentication()` and `.endAuthentication()`.\n\nA few examples can illustrate how the methods are used. First, [the command-line interface](https://github.com/23/node-23video/blob/master/lib/cli.js) uses it like this:\n\n    var visualplatform = require(\'./visualplatform\')(program.domain, program.key, program.secret, \'oob\');\n    visualplatform.beginAuthentication()\n      .then(function(url){\n            console.log(\'To verify access, open the following URL in your browser and follow the instructions.\\n  \'+url+\'\\n\');\n            program.prompt(\'To complete the authorization, paste the string from the browser here: \', function(verifier){        \n                             process.stdin.destroy();\n                             visualplatform.completeAuthentication(null, verifier)\n                               .then(\n                                 function(credentials){\n                                       console.log(\'\\nCREDENTIALS FOR 23 VIDEO:\');\n                                       console.log(\'Domain:\\t\\t\\t\', credentials.domain);\n                                       console.log(\'Consumer key:\\t\\t\', program.key);\n                                       console.log(\'Consumer secret:\\t\', program.secret);\n                                       console.log(\'Access token:\\t\\t\', credentials.oauth_token);\n                                       console.log(\'Access token secret:\\t\', credentials.oauth_token_secret);\n                                       console.log(\'\')\n                                     },\n                                 function(message){\n                                       console.log(\'Error while completing authentication:\', message);\n                                     });\n                           });\n          }, function(message){\n            console.log(\'Error while beginning authentication:\', message);\n          });\n\nA more likely example handles login through 23 Video. In the [Express application framework](http://expressjs.com/), this might be achieved like this:\n\n    // Instance of the library\n    var visualplatform = require(\'./visualplatform\')(null, program.key, program.secret, \'http://examples.com/oauth/23video\');\n\n    // Bootstrap Express to handle HTTP service\n    var express = require(\'express\');\n    var app = express.createServer();\n\n    // Create a URL at http://examples.com/oauth/23video/redirect which initiates the flow\n    app.get(\'/oauth/23video/redirect\', function(req, res){\n        visualplatform.beginAuthentication()\n          .then(function(url){\n              res.redirect(url);\n           })\n    });\n\n    // Create a URL at http://examples.com/oauth/23video to handle callback and retrieval of access credentials\n    app.get(\'/oauth/23video, function(req, res){\n        visualplatform.completeAuthentication(req.query.oauth_token, req.query.oauth_verifier)\n          .then(function(credentials){\n              console.log(\'domain\', credentials.domain);\n              console.log(\'site_id\', credentials.site_id);\n              console.log(\'token\', credentials.oauth_token);\n              console.log(\'token secret\', credentials.oauth_token_secret)\n              res.redirect(\'/\');\n            })\n    });\n\n\n## Using the command-line interface for Node.js\n\nThe library comes with `./23video` a command-line interface (CLI) for The 23 Video API. Like the library itself, the CLI does open API requests, signed request and can handle token exchange or login.\n\n\nOpen requests without signatures\n\n    ./23video -m photo.list search test limit 30\n\nSigned requests to the API\n\n    ./23video -k <consumer_key> -s <consumer_secret> -at <access_token> -as <access_secret> -m photo.list search test limit 30\n\nGet access credentials from consumer keys\n\n    ./23video --auth -k <consumer_key> -s <consumer_secret>\n\nFull documentation is available with `./23video --help`:\n\n  Usage: 23video [options]\n\n  Options:\n\n    -h, --help                            output usage information\n    -V, --version                         output the version number\n    -m, --method <method>                 Method to call in the 23 Video API\n    -d, --domain [domain]                 Domain for the 23 Video site\n    -a, --auth                            Authenticate against the 23 Video API\n    -k, --key [key]                       OAuth consumer key\n    -s, --secret [secret]                 OAuth consumer secret\n    -at, --access_token [access_token]    OAuth access token\n    -as, --access_secret [access_secret]  OAuth access token secret\n\n\n### To-do\n\n* Handle file uploads in the library\n* Handle file uploads through CLI\n* Store credentials on disk for easy access on the CLI\n* Prompt for domain, method, key/secret in CLI when required\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '341d8fde24eaa40e9aa97e8a66cc4dfa33ca8e5c',
28 silly publish   _id: 'node-23video@1.0.0',
28 silly publish   _shasum: '0bf8775a15e72e046745ef3047144b5cdad04e5c',
28 silly publish   _from: '.' }
29 verbose request where is /node-23video
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 44c9997b3aa5b7ec
32 verbose url raw /node-23video
33 verbose url resolving [ 'https://registry.npmjs.org/', './node-23video' ]
34 verbose url resolved https://registry.npmjs.org/node-23video
35 verbose request where is https://registry.npmjs.org/node-23video
36 info trying registry request attempt 1 at 17:58:52
37 http PUT https://registry.npmjs.org/node-23video
38 http 403 https://registry.npmjs.org/node-23video
39 verbose headers { date: 'Fri, 15 Aug 2014 15:58:56 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '10363',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-fra1234-FRA',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1408118335.998607,VS0,VE674',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 1.0.0
41 error old={"name":"node-23video","version":"1.0.0","description":"node-23video is a full implementation of The 23 Video API (or more correctly, The Visualplatform API) for Node.js.","main":"visualplatform.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/peterdremstrup/node-23video.git"},"keywords":["23","23video","visualplatform"],"author":{"name":"Steffen T. Christensen"},"license":"ISC","bugs":{"url":"https://github.com/peterdremstrup/node-23video/issues"},"homepage":"https://github.com/peterdremstrup/node-23video","gitHead":"68dd5a58ebf580493bd18ad0c1f1acc400f07e84","_id":"node-23video@1.0.0","_shasum":"817e6278f6c31dfbbf3774a1be5eaa47a9df9401","_from":".","_npmVersion":"1.4.20","_npmUser":{"name":"peterdremstrup","email":"peter@dremstrup.dk"},"maintainers":[{"name":"peterdremstrup","email":"peter@dremstrup.dk"}],"dist":{"shasum":"817e6278f6c31dfbbf3774a1be5eaa47a9df9401","tarball":"http://registry.npmjs.org/node-23video/-/node-23video-1.0.0.tgz"}}
41 error new={"name":"node-23video","version":"1.0.0","description":"node-23video is a full implementation of The 23 Video API (or more correctly, The Visualplatform API) for Node.js.","main":"visualplatform.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/peterdremstrup/node-23video.git"},"keywords":["23video","23","visualplatform"],"author":{"name":"Steffen T. Christensen"},"license":"ISC","bugs":{"url":"https://github.com/peterdremstrup/node-23video/issues"},"homepage":"https://github.com/peterdremstrup/node-23video","readme":"## 23 Video API for Node.js\u000a\u000a`node-23video` is a full implementation of [The 23 Video API](http://www.23developer.com/api) (or more correctly, The Visualplatform API) for [Node.js](http://www.nodejs.org). \u000a\u000aThe library includes:\u000a\u000a* Implementations of all the methods in the API.\u000a* OAuth signatures through [23's fork of `restler`](http://github.com/23/restler).\u000a* Methods to handle the exchange of OAuth of credentials ([more information](http://www.23developer.com/api/oauth)).\u000a* A handy command-line interface to the 23 Video API.\u000a\u000aThe library and it dependencies is easily installed throuh `git`:\u000a\u000a    cd node_modules/\u000a    git clone https://github.com/peterdremstrup/node-23video.git\u000a    cd node-23video\u000a    git submodule init\u000a    git submodule update\u000a\u000aFollowing packages must be installed (either with `npm install` or manually) for this to work:\u000a - promise (https://github.com/ForbesLindesay/promisejs.org)\u000a\u000aNPM package might come sooner or later.\u000a\u000a## Use the 23 Video API in Node.js\u000a\u000aMaking simple request to the open API:\u000a\u000a    var visualplatform = Visualplatform(domain);\u000a    visualplatform.album.list({search:'test'})\u000a      .then(\u000a        function(data){...},\u000a        function(errorMessage){...}\u000a      );\u000a\u000aMaking OAuth signed requests to the API:\u000a\u000a    var visualplatform = Visualplatform(domain, key, secret);\u000a    visualplatform.album.create({title:'New album'}, access_token. access_token_secret)\u000a      .then(\u000a        function(data){...},\u000a        function(errorMessage){...}\u000a      );\u000a\u000aMethods can be called as:\u000a\u000a    visualplatform.photo.updateUploadToken(...)\u000a    visualplatform['photo.updateUploadToken'](...)\u000a    visualplatform['/api/photo/update-upload-token'](...)\u000a\u000aThe first parameter is always a JS object with the filter data described in [the API documentation](http://www.23developer.com/api/#methods).\u000a\u000aAll methods requiring authentication takes `access_token` and `access_token_secret` as their second and third parameters.\u000a\u000aThe library using [@kriszyp](https://twitter.com/kriszyp)'s [`node-promise`](https://github.com/kriszyp/node-promise) complete implementation of JavaScript promises.\u000a\u000a\u000a## Exchanging tokens (or: Having user grant access to the API)\u000a\u000aThe library includes two methods wrapping the OAuth token flow, `.beginAuthentication()` and `.endAuthentication()`.\u000a\u000aA few examples can illustrate how the methods are used. First, [the command-line interface](https://github.com/23/node-23video/blob/master/lib/cli.js) uses it like this:\u000a\u000a    var visualplatform = require('./visualplatform')(program.domain, program.key, program.secret, 'oob');\u000a    visualplatform.beginAuthentication()\u000a      .then(function(url){\u000a            console.log('To verify access, open the following URL in your browser and follow the instructions.\\n  '+url+'\\n');\u000a            program.prompt('To complete the authorization, paste the string from the browser here: ', function(verifier){        \u000a                             process.stdin.destroy();\u000a                             visualplatform.completeAuthentication(null, verifier)\u000a                               .then(\u000a                                 function(credentials){\u000a                                       console.log('\\nCREDENTIALS FOR 23 VIDEO:');\u000a                                       console.log('Domain:\\t\\t\\t', credentials.domain);\u000a                                       console.log('Consumer key:\\t\\t', program.key);\u000a                                       console.log('Consumer secret:\\t', program.secret);\u000a                                       console.log('Access token:\\t\\t', credentials.oauth_token);\u000a                                       console.log('Access token secret:\\t', credentials.oauth_token_secret);\u000a                                       console.log('')\u000a                                     },\u000a                                 function(message){\u000a                                       console.log('Error while completing authentication:', message);\u000a                                     });\u000a                           });\u000a          }, function(message){\u000a            console.log('Error while beginning authentication:', message);\u000a          });\u000a\u000aA more likely example handles login through 23 Video. In the [Express application framework](http://expressjs.com/), this might be achieved like this:\u000a\u000a    // Instance of the library\u000a    var visualplatform = require('./visualplatform')(null, program.key, program.secret, 'http://examples.com/oauth/23video');\u000a\u000a    // Bootstrap Express to handle HTTP service\u000a    var express = require('express');\u000a    var app = express.createServer();\u000a\u000a    // Create a URL at http://examples.com/oauth/23video/redirect which initiates the flow\u000a    app.get('/oauth/23video/redirect', function(req, res){\u000a        visualplatform.beginAuthentication()\u000a          .then(function(url){\u000a              res.redirect(url);\u000a           })\u000a    });\u000a\u000a    // Create a URL at http://examples.com/oauth/23video to handle callback and retrieval of access credentials\u000a    app.get('/oauth/23video, function(req, res){\u000a        visualplatform.completeAuthentication(req.query.oauth_token, req.query.oauth_verifier)\u000a          .then(function(credentials){\u000a              console.log('domain', credentials.domain);\u000a              console.log('site_id', credentials.site_id);\u000a              console.log('token', credentials.oauth_token);\u000a              console.log('token secret', credentials.oauth_token_secret)\u000a              res.redirect('/');\u000a            })\u000a    });\u000a\u000a\u000a## Using the command-line interface for Node.js\u000a\u000aThe library comes with `./23video` a command-line interface (CLI) for The 23 Video API. Like the library itself, the CLI does open API requests, signed request and can handle token exchange or login.\u000a\u000a\u000aOpen requests without signatures\u000a\u000a    ./23video -m photo.list search test limit 30\u000a\u000aSigned requests to the API\u000a\u000a    ./23video -k <consumer_key> -s <consumer_secret> -at <access_token> -as <access_secret> -m photo.list search test limit 30\u000a\u000aGet access credentials from consumer keys\u000a\u000a    ./23video --auth -k <consumer_key> -s <consumer_secret>\u000a\u000aFull documentation is available with `./23video --help`:\u000a\u000a  Usage: 23video [options]\u000a\u000a  Options:\u000a\u000a    -h, --help                            output usage information\u000a    -V, --version                         output the version number\u000a    -m, --method <method>                 Method to call in the 23 Video API\u000a    -d, --domain [domain]                 Domain for the 23 Video site\u000a    -a, --auth                            Authenticate against the 23 Video API\u000a    -k, --key [key]                       OAuth consumer key\u000a    -s, --secret [secret]                 OAuth consumer secret\u000a    -at, --access_token [access_token]    OAuth access token\u000a    -as, --access_secret [access_secret]  OAuth access token secret\u000a\u000a\u000a### To-do\u000a\u000a* Handle file uploads in the library\u000a* Handle file uploads through CLI\u000a* Store credentials on disk for easy access on the CLI\u000a* Prompt for domain, method, key/secret in CLI when required\u000a","readmeFilename":"README.md","gitHead":"341d8fde24eaa40e9aa97e8a66cc4dfa33ca8e5c","_id":"node-23video@1.0.0","_shasum":"0bf8775a15e72e046745ef3047144b5cdad04e5c","_from":".","_npmVersion":"1.4.20","_npmUser":{"name":"peterdremstrup","email":"peter@dremstrup.dk"},"maintainers":[{"name":"peterdremstrup","email":"peter@dremstrup.dk"}],"dist":{"shasum":"0bf8775a15e72e046745ef3047144b5cdad04e5c","tarball":"http://registry.npmjs.org/node-23video/-/node-23video-1.0.0.tgz"}}: node-23video
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.EventEmitter.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.EventEmitter.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
41 error     at _stream_readable.js:912:16
41 error     at process._tickCallback (node.js:415:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.3.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Domain/PeopleGroup.Internal/Users/pdre/Git/node-23video
46 error node -v v0.10.16
47 error npm -v 1.4.20
48 verbose exit [ 1, true ]
